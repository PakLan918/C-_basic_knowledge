#pragma once


void basic12()
{
	//二维数组
	//通常用嵌套循环来输出二维数组，外循环行数，内循环列数
	//定义方式：
	//(1)数据类型 数组名[行数][列数];
	int arr[2][3];
	//(2)数据类型 数组名[行数][列数] = {{数据1，数据2},{数据3，数据4}};   常用第二种定义类型，可读性强
	int arr1[2][3] =
	{
		{1,2,3},
		{4,5,6}
	};
	//(3)数据类型 数组名[行数][列数]= {数据1，数据2，数据3，数据4};
	int arr2[2][3] = { 1,2,3,4,5,6 };
	//(4)数据类型 数据名[][列数]={数据1，数据2，数据3，数据4};
	int arr3[][3] = { 1,2,3,4,5,6 };

	//遍历二维数组
	for (int i = 0; i < sizeof(arr1) / sizeof(arr1[0]); i++)
	{
		for (int j = 0; j < sizeof(arr1[0]) / sizeof(arr1[0][0]); j++)
		{
			cout << arr1[i][j] << "  ";
		}
		cout << endl;
	}

	//二维数组名称用途
	//1、可以查看占用内存大小
	//以arr1为例
	cout << "二维数组占用内存空间为：" << sizeof(arr1) << endl;
	cout << "二维数组第一行占用内存空间为：" << sizeof(arr1[0]) << endl;
	cout << "二维数组第一个元素占用内存空间为：" << sizeof(arr1[0][0]) << endl;
	cout << "二维数组行数为：" << sizeof(arr1) / sizeof(arr1[0]) << endl;
	cout << "二维数组列数为：" << sizeof(arr1[0]) / sizeof(arr1[0][0]) << endl;

	//2、可以查看二维数组的首地址
	cout << "二维数组的首地址为：" << &arr << endl;
	cout << "二维数组第一行的地址为：" << &arr[0] << endl;
	cout << "二维数组第一个元素的首地址为：" << &arr[0][0] << endl;
}