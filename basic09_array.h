#pragma once



void basic09()
{
	//数组（一个集合，里面存放了相同 类型 的数据元素）
	//特点1：数组中的 每个元素 都是相同的数据类型
	//特点2：数组是由 连续的内存位置 组成的

	//1、一维数组（3种定义方式）
	//(1)数据类型 数组名[数组长度]
	int arr[5];   //数组元素的下标从0开始索引
	//(2)数据类型 数组名[数组长度]={值1，值2，......};
	int arr2[5] = { 10,20,30,40 }; //如果在初始化数据时 没有全部填写 完，会用 0 来填补数据
	//(3)数据类型 数组名[]={值1，值2，......};
	int arr3[] = { 90,80,70,60,50,40,30,20,10 };
	//定义数组时，必须有初始长度
	//可以利用循环来输出数组的数据
	/*for (int i = 0; i < 5; i++)
	{
		cout << arr3[i] << "  ";
	}*/

	//2、一维数组名称用途
	//(1)可以统计 整个数组 在内存中的长度   使用 sizeof 关键字
	//(2)可以获取数组在内存中的 首地址
	int arr4[10] = { 1,2,3,4,5,6,7,8,9,10 };
	cout << "整个数组占用内存空间为：" << sizeof(arr4) << endl;              //整个数组占用空间与数据类型有关，存放了多少个数据便占用 数据类型占用字节*个数 的内存空间
	cout << "每个元素占用内存空间为：" << sizeof(arr4[0]) << endl;           //为 数据类型占用字节 的内存空间
	cout << "数组中元素个数为：" << sizeof(arr4) / sizeof(arr4[0]) << endl;
	cout << "数组首地址为：" << arr4 << endl;                                //首地址和第一个元素地址相同
	cout << "数组中第一个元素地址为：" << &arr4[0] << endl;
	//注意：数组名时常量，不可以进行赋值操作！
	//arr4 = 100;
}
